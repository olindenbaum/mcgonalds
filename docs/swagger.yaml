basePath: /api/v1
definitions:
  handlers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handlers.SignupRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  handlers.StartServerRequest:
    properties:
      port:
        type: string
      ram:
        type: string
    type: object
  model.ErrorResponse:
    properties:
      error:
        example: Invalid input data
        type: string
      message:
        example: Bad Request
        type: string
      status:
        example: 400
        type: integer
    type: object
  model.JarFile:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      is_common:
        type: boolean
      name:
        type: string
      path:
        type: string
      updated_at:
        type: string
      version:
        type: string
    type: object
  model.ModPack:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      is_common:
        type: boolean
      name:
        type: string
      path:
        type: string
      updated_at:
        type: string
      version:
        type: string
    type: object
  model.Server:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      name:
        type: string
      path:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a Minecraft server management service API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Minecraft Server Manager API
  version: "1.0"
paths:
  /jar-files:
    get:
      description: Retrieve a list of common JAR files
      parameters:
      - description: Filter by common JAR files
        in: query
        name: common
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.JarFile'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get common JAR files
      tags:
      - jar-files
    post:
      consumes:
      - multipart/form-data
      description: Upload a shared JAR file to be used by multiple servers
      parameters:
      - description: Nickname of the JAR file
        in: formData
        name: name
        required: true
        type: string
      - description: Version of the JAR file
        in: formData
        name: version
        required: true
        type: string
      - description: The JAR file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.JarFile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Upload a shared JAR file
      tags:
      - jar-files
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and get a JWT token
      parameters:
      - description: User login information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid email or password
          schema:
            type: string
      summary: Authenticate user
      tags:
      - auth
  /mod-packs:
    get:
      description: Retrieve a list of common mod packs
      parameters:
      - description: Filter by common mod packs
        in: query
        name: common
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ModPack'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get common mod packs
      tags:
      - mod-packs
    post:
      consumes:
      - multipart/form-data
      description: Upload a shared mod pack to be used by multiple servers
      parameters:
      - description: Name of the mod pack
        in: formData
        name: name
        required: true
        type: string
      - description: Version of the mod pack
        in: formData
        name: version
        required: true
        type: string
      - description: Type of the mod pack (e.g., zip, folder)
        in: formData
        name: type
        required: true
        type: string
      - description: The mod pack file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ModPack'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Upload a shared mod pack
      tags:
      - mod-packs
  /servers:
    get:
      description: Get a list of all Minecraft servers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Server'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: List all Minecraft servers
      tags:
      - servers
    post:
      consumes:
      - application/json
      description: Create a new Minecraft server with specified jar file and additional
        files
      parameters:
      - description: Server Name
        in: formData
        name: name
        required: true
        type: string
      - description: Executable Command
        in: formData
        name: executable_command
        required: true
        type: string
      - description: JAR File ID
        in: formData
        name: jar_file_id
        type: integer
      - description: JAR File
        in: formData
        name: jar_file
        type: file
      - description: Mod Pack ID
        in: formData
        name: mod_pack_id
        type: integer
      - description: Mod Pack File
        in: formData
        name: mod_pack
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Server'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create a new Minecraft server
      tags:
      - servers
  /servers/{id}:
    delete:
      description: Delete a specific Minecraft server by name
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Delete a Minecraft server
      tags:
      - servers
    get:
      description: Get details of a specific Minecraft server by name
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Server'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get a specific Minecraft server
      tags:
      - servers
  /servers/{id}/command:
    post:
      consumes:
      - application/json
      description: Send a command to a specific Minecraft server by name
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: integer
      - description: Command to send
        in: body
        name: command
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Send a command to a Minecraft server
      tags:
      - servers
  /servers/{id}/output:
    get:
      description: Retrieve the output stream of a specific Minecraft server
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get server output
      tags:
      - servers
  /servers/{id}/output/ws:
    get:
      description: Establish a WebSocket connection to receive real-time server output
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: integer
      responses: {}
      summary: Get server output via WebSocket
      tags:
      - servers
  /servers/{id}/restart:
    post:
      description: Restart a specific Minecraft server by name
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Restart a Minecraft server
      tags:
      - servers
  /servers/{id}/start:
    post:
      consumes:
      - application/json
      description: Start a specific Minecraft server by name with customizable RAM
        and port
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: integer
      - description: RAM and Port
        in: body
        name: StartServerRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.StartServerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Start a Minecraft server
      tags:
      - servers
  /servers/{id}/stop:
    post:
      description: Stop a specific Minecraft server by name
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Stop a Minecraft server
      tags:
      - servers
  /servers/{name}/upload-modpack:
    post:
      consumes:
      - multipart/form-data
      description: Upload a mod pack to a specific server, either selecting a common
        mod pack or uploading a new one
      parameters:
      - description: Server Name
        in: path
        name: name
        required: true
        type: string
      - description: Mod pack file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Mod pack uploaded successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Upload mod pack for a server
      tags:
      - servers
  /servers/{serverId}/upload-jar:
    post:
      consumes:
      - multipart/form-data
      description: Upload a JAR file to a specific server, either selecting a common
        JAR or uploading a new one
      parameters:
      - description: Server Name
        in: formData
        name: name
        required: true
        type: string
      - description: Version of the JAR file
        in: formData
        name: version
        required: true
        type: string
      - description: Server ID
        in: path
        name: serverID
        required: true
        type: string
      - description: JAR file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: JAR file uploaded successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Upload JAR file for a server
      tags:
      - servers
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User signup information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.SignupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request payload or user creation error
          schema:
            type: string
        "500":
          description: Error processing password
          schema:
            type: string
      summary: Register a new user
      tags:
      - auth
swagger: "2.0"
